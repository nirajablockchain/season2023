prev_progress = 0

def reward_function(params):
    # Constants for scaling the rewards
    DISTANCE_WEIGHT = 0.8
    PROGRESS_WEIGHT = 0.2
    IMPROVEMENT_REWARD = 0.1
    global prev_progress

    # Get current progress and distance to next waypoint
    progress = params['progress']
    distance = params['distance_from_center']

    # Calculate the progress made relative to the previous waypoint
    prev_waypoint = params['closest_waypoints'][0]
    next_waypoint = params['closest_waypoints'][1]
    track_length = params['track_length']
    distance_to_next_waypoint = params['distances_from_center'][next_waypoint]
    distance_to_prev_waypoint = params['distances_from_center'][prev_waypoint]
    distance_progress = distance_to_prev_waypoint - distance_to_next_waypoint

    # Calculate the reward based on progress and distance
    progress_reward = progress / track_length
    distance_reward = 1.0 if distance < 0.1 else distance / track_length

    # Calculate the improvement in progress compared to the previous step
    
    progress_improvement = progress - prev_progress

    # Apply improvement reward
    improvement_reward = IMPROVEMENT_REWARD * progress_improvement

    # Combine progress, distance, and improvement rewards
    total_reward = (
        (PROGRESS_WEIGHT * progress_reward) +
        (DISTANCE_WEIGHT * distance_reward) +
        improvement_reward
    )
    prev_progress = progress
    
    is_offtrack = params['is_offtrack']
    if is_offtrack:
        total_reward = 1e-7

    return float(total_reward)
